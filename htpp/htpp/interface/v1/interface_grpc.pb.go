// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/htpp/htpp/interface/v1/interface.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Interface_Login_FullMethodName                       = "/htpp.htpp.interface.v1.Interface/Login"
	Interface_Register_FullMethodName                    = "/htpp.htpp.interface.v1.Interface/Register"
	Interface_GetCurrentUser_FullMethodName              = "/htpp.htpp.interface.v1.Interface/GetCurrentUser"
	Interface_UpdateUser_FullMethodName                  = "/htpp.htpp.interface.v1.Interface/UpdateUser"
	Interface_ReadOne_FullMethodName                     = "/htpp.htpp.interface.v1.Interface/ReadOne"
	Interface_ReadAll_FullMethodName                     = "/htpp.htpp.interface.v1.Interface/ReadAll"
	Interface_ReadOneWithBinary_FullMethodName           = "/htpp.htpp.interface.v1.Interface/ReadOneWithBinary"
	Interface_ReadAllWithBinary_FullMethodName           = "/htpp.htpp.interface.v1.Interface/ReadAllWithBinary"
	Interface_ReadOneWithBinaryAndCalArea_FullMethodName = "/htpp.htpp.interface.v1.Interface/ReadOneWithBinaryAndCalArea"
	Interface_ReadAllWithBinaryAndCalArea_FullMethodName = "/htpp.htpp.interface.v1.Interface/ReadAllWithBinaryAndCalArea"
	Interface_RegisterMachine_FullMethodName             = "/htpp.htpp.interface.v1.Interface/RegisterMachine"
	Interface_UpdateMachine_FullMethodName               = "/htpp.htpp.interface.v1.Interface/UpdateMachine"
	Interface_GetMachine_FullMethodName                  = "/htpp.htpp.interface.v1.Interface/GetMachine"
	Interface_GetCurrentUserMachines_FullMethodName      = "/htpp.htpp.interface.v1.Interface/GetCurrentUserMachines"
	Interface_Move_FullMethodName                        = "/htpp.htpp.interface.v1.Interface/Move"
	Interface_Zero_FullMethodName                        = "/htpp.htpp.interface.v1.Interface/Zero"
	Interface_GetMotorStatus_FullMethodName              = "/htpp.htpp.interface.v1.Interface/GetMotorStatus"
	Interface_CreateCronJob_FullMethodName               = "/htpp.htpp.interface.v1.Interface/CreateCronJob"
	Interface_DeleteCronJob_FullMethodName               = "/htpp.htpp.interface.v1.Interface/DeleteCronJob"
	Interface_ListCronJob_FullMethodName                 = "/htpp.htpp.interface.v1.Interface/ListCronJob"
)

// InterfaceClient is the client API for Interface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterfaceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserReply, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserReply, error)
	GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*UserReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserReply, error)
	ReadOne(ctx context.Context, in *ReadOneRequest, opts ...grpc.CallOption) (*ImageReply, error)
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ImagesReply, error)
	ReadOneWithBinary(ctx context.Context, in *ReadOneWithBinaryRequest, opts ...grpc.CallOption) (*ImageReply, error)
	ReadAllWithBinary(ctx context.Context, in *ReadAllWithBinaryRequest, opts ...grpc.CallOption) (*ImagesReply, error)
	ReadOneWithBinaryAndCalArea(ctx context.Context, in *ReadOneWithBinaryAndCalAreaRequest, opts ...grpc.CallOption) (*ImageWithAreaReply, error)
	ReadAllWithBinaryAndCalArea(ctx context.Context, in *ReadAllWithBinaryAndCalAreaRequest, opts ...grpc.CallOption) (*ImagesWithAreaReply, error)
	RegisterMachine(ctx context.Context, in *RegisterMachineRequest, opts ...grpc.CallOption) (*MachineReply, error)
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*MachineReply, error)
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*MachineReply, error)
	GetCurrentUserMachines(ctx context.Context, in *GetCurrentUserMachinesRequest, opts ...grpc.CallOption) (*MachinesReply, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveReply, error)
	Zero(ctx context.Context, in *ZeroRequest, opts ...grpc.CallOption) (*ZeroReply, error)
	GetMotorStatus(ctx context.Context, in *GetMotorStatusRequest, opts ...grpc.CallOption) (*GetMotorStatusReply, error)
	CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*CronJobReply, error)
	DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...grpc.CallOption) (*DeleteCronJobReply, error)
	ListCronJob(ctx context.Context, in *ListCronJobRequest, opts ...grpc.CallOption) (*CronJobsReply, error)
}

type interfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterfaceClient(cc grpc.ClientConnInterface) InterfaceClient {
	return &interfaceClient{cc}
}

func (c *interfaceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, Interface_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, Interface_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, Interface_GetCurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, Interface_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) ReadOne(ctx context.Context, in *ReadOneRequest, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, Interface_ReadOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ImagesReply, error) {
	out := new(ImagesReply)
	err := c.cc.Invoke(ctx, Interface_ReadAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) ReadOneWithBinary(ctx context.Context, in *ReadOneWithBinaryRequest, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, Interface_ReadOneWithBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) ReadAllWithBinary(ctx context.Context, in *ReadAllWithBinaryRequest, opts ...grpc.CallOption) (*ImagesReply, error) {
	out := new(ImagesReply)
	err := c.cc.Invoke(ctx, Interface_ReadAllWithBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) ReadOneWithBinaryAndCalArea(ctx context.Context, in *ReadOneWithBinaryAndCalAreaRequest, opts ...grpc.CallOption) (*ImageWithAreaReply, error) {
	out := new(ImageWithAreaReply)
	err := c.cc.Invoke(ctx, Interface_ReadOneWithBinaryAndCalArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) ReadAllWithBinaryAndCalArea(ctx context.Context, in *ReadAllWithBinaryAndCalAreaRequest, opts ...grpc.CallOption) (*ImagesWithAreaReply, error) {
	out := new(ImagesWithAreaReply)
	err := c.cc.Invoke(ctx, Interface_ReadAllWithBinaryAndCalArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) RegisterMachine(ctx context.Context, in *RegisterMachineRequest, opts ...grpc.CallOption) (*MachineReply, error) {
	out := new(MachineReply)
	err := c.cc.Invoke(ctx, Interface_RegisterMachine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*MachineReply, error) {
	out := new(MachineReply)
	err := c.cc.Invoke(ctx, Interface_UpdateMachine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*MachineReply, error) {
	out := new(MachineReply)
	err := c.cc.Invoke(ctx, Interface_GetMachine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) GetCurrentUserMachines(ctx context.Context, in *GetCurrentUserMachinesRequest, opts ...grpc.CallOption) (*MachinesReply, error) {
	out := new(MachinesReply)
	err := c.cc.Invoke(ctx, Interface_GetCurrentUserMachines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveReply, error) {
	out := new(MoveReply)
	err := c.cc.Invoke(ctx, Interface_Move_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) Zero(ctx context.Context, in *ZeroRequest, opts ...grpc.CallOption) (*ZeroReply, error) {
	out := new(ZeroReply)
	err := c.cc.Invoke(ctx, Interface_Zero_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) GetMotorStatus(ctx context.Context, in *GetMotorStatusRequest, opts ...grpc.CallOption) (*GetMotorStatusReply, error) {
	out := new(GetMotorStatusReply)
	err := c.cc.Invoke(ctx, Interface_GetMotorStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*CronJobReply, error) {
	out := new(CronJobReply)
	err := c.cc.Invoke(ctx, Interface_CreateCronJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...grpc.CallOption) (*DeleteCronJobReply, error) {
	out := new(DeleteCronJobReply)
	err := c.cc.Invoke(ctx, Interface_DeleteCronJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interfaceClient) ListCronJob(ctx context.Context, in *ListCronJobRequest, opts ...grpc.CallOption) (*CronJobsReply, error) {
	out := new(CronJobsReply)
	err := c.cc.Invoke(ctx, Interface_ListCronJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterfaceServer is the server API for Interface service.
// All implementations must embed UnimplementedInterfaceServer
// for forward compatibility
type InterfaceServer interface {
	Login(context.Context, *LoginRequest) (*UserReply, error)
	Register(context.Context, *RegisterRequest) (*UserReply, error)
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*UserReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserReply, error)
	ReadOne(context.Context, *ReadOneRequest) (*ImageReply, error)
	ReadAll(context.Context, *ReadAllRequest) (*ImagesReply, error)
	ReadOneWithBinary(context.Context, *ReadOneWithBinaryRequest) (*ImageReply, error)
	ReadAllWithBinary(context.Context, *ReadAllWithBinaryRequest) (*ImagesReply, error)
	ReadOneWithBinaryAndCalArea(context.Context, *ReadOneWithBinaryAndCalAreaRequest) (*ImageWithAreaReply, error)
	ReadAllWithBinaryAndCalArea(context.Context, *ReadAllWithBinaryAndCalAreaRequest) (*ImagesWithAreaReply, error)
	RegisterMachine(context.Context, *RegisterMachineRequest) (*MachineReply, error)
	UpdateMachine(context.Context, *UpdateMachineRequest) (*MachineReply, error)
	GetMachine(context.Context, *GetMachineRequest) (*MachineReply, error)
	GetCurrentUserMachines(context.Context, *GetCurrentUserMachinesRequest) (*MachinesReply, error)
	Move(context.Context, *MoveRequest) (*MoveReply, error)
	Zero(context.Context, *ZeroRequest) (*ZeroReply, error)
	GetMotorStatus(context.Context, *GetMotorStatusRequest) (*GetMotorStatusReply, error)
	CreateCronJob(context.Context, *CreateCronJobRequest) (*CronJobReply, error)
	DeleteCronJob(context.Context, *DeleteCronJobRequest) (*DeleteCronJobReply, error)
	ListCronJob(context.Context, *ListCronJobRequest) (*CronJobsReply, error)
	mustEmbedUnimplementedInterfaceServer()
}

// UnimplementedInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedInterfaceServer struct {
}

func (UnimplementedInterfaceServer) Login(context.Context, *LoginRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedInterfaceServer) Register(context.Context, *RegisterRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedInterfaceServer) GetCurrentUser(context.Context, *GetCurrentUserRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUser not implemented")
}
func (UnimplementedInterfaceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedInterfaceServer) ReadOne(context.Context, *ReadOneRequest) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOne not implemented")
}
func (UnimplementedInterfaceServer) ReadAll(context.Context, *ReadAllRequest) (*ImagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedInterfaceServer) ReadOneWithBinary(context.Context, *ReadOneWithBinaryRequest) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOneWithBinary not implemented")
}
func (UnimplementedInterfaceServer) ReadAllWithBinary(context.Context, *ReadAllWithBinaryRequest) (*ImagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllWithBinary not implemented")
}
func (UnimplementedInterfaceServer) ReadOneWithBinaryAndCalArea(context.Context, *ReadOneWithBinaryAndCalAreaRequest) (*ImageWithAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOneWithBinaryAndCalArea not implemented")
}
func (UnimplementedInterfaceServer) ReadAllWithBinaryAndCalArea(context.Context, *ReadAllWithBinaryAndCalAreaRequest) (*ImagesWithAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllWithBinaryAndCalArea not implemented")
}
func (UnimplementedInterfaceServer) RegisterMachine(context.Context, *RegisterMachineRequest) (*MachineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMachine not implemented")
}
func (UnimplementedInterfaceServer) UpdateMachine(context.Context, *UpdateMachineRequest) (*MachineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (UnimplementedInterfaceServer) GetMachine(context.Context, *GetMachineRequest) (*MachineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (UnimplementedInterfaceServer) GetCurrentUserMachines(context.Context, *GetCurrentUserMachinesRequest) (*MachinesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUserMachines not implemented")
}
func (UnimplementedInterfaceServer) Move(context.Context, *MoveRequest) (*MoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedInterfaceServer) Zero(context.Context, *ZeroRequest) (*ZeroReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Zero not implemented")
}
func (UnimplementedInterfaceServer) GetMotorStatus(context.Context, *GetMotorStatusRequest) (*GetMotorStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMotorStatus not implemented")
}
func (UnimplementedInterfaceServer) CreateCronJob(context.Context, *CreateCronJobRequest) (*CronJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronJob not implemented")
}
func (UnimplementedInterfaceServer) DeleteCronJob(context.Context, *DeleteCronJobRequest) (*DeleteCronJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (UnimplementedInterfaceServer) ListCronJob(context.Context, *ListCronJobRequest) (*CronJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronJob not implemented")
}
func (UnimplementedInterfaceServer) mustEmbedUnimplementedInterfaceServer() {}

// UnsafeInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterfaceServer will
// result in compilation errors.
type UnsafeInterfaceServer interface {
	mustEmbedUnimplementedInterfaceServer()
}

func RegisterInterfaceServer(s grpc.ServiceRegistrar, srv InterfaceServer) {
	s.RegisterService(&Interface_ServiceDesc, srv)
}

func _Interface_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_GetCurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).GetCurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_GetCurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_ReadOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).ReadOne(ctx, req.(*ReadOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_ReadAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).ReadAll(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_ReadOneWithBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOneWithBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).ReadOneWithBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_ReadOneWithBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).ReadOneWithBinary(ctx, req.(*ReadOneWithBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_ReadAllWithBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllWithBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).ReadAllWithBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_ReadAllWithBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).ReadAllWithBinary(ctx, req.(*ReadAllWithBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_ReadOneWithBinaryAndCalArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOneWithBinaryAndCalAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).ReadOneWithBinaryAndCalArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_ReadOneWithBinaryAndCalArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).ReadOneWithBinaryAndCalArea(ctx, req.(*ReadOneWithBinaryAndCalAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_ReadAllWithBinaryAndCalArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllWithBinaryAndCalAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).ReadAllWithBinaryAndCalArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_ReadAllWithBinaryAndCalArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).ReadAllWithBinaryAndCalArea(ctx, req.(*ReadAllWithBinaryAndCalAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_RegisterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).RegisterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_RegisterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).RegisterMachine(ctx, req.(*RegisterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_UpdateMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_GetMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_GetCurrentUserMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).GetCurrentUserMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_GetCurrentUserMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).GetCurrentUserMachines(ctx, req.(*GetCurrentUserMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_Zero_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZeroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).Zero(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_Zero_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).Zero(ctx, req.(*ZeroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_GetMotorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMotorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).GetMotorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_GetMotorStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).GetMotorStatus(ctx, req.(*GetMotorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_CreateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).CreateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_CreateCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).CreateCronJob(ctx, req.(*CreateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_DeleteCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).DeleteCronJob(ctx, req.(*DeleteCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interface_ListCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterfaceServer).ListCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Interface_ListCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterfaceServer).ListCronJob(ctx, req.(*ListCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Interface_ServiceDesc is the grpc.ServiceDesc for Interface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "htpp.htpp.interface.v1.Interface",
	HandlerType: (*InterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Interface_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Interface_Register_Handler,
		},
		{
			MethodName: "GetCurrentUser",
			Handler:    _Interface_GetCurrentUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Interface_UpdateUser_Handler,
		},
		{
			MethodName: "ReadOne",
			Handler:    _Interface_ReadOne_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _Interface_ReadAll_Handler,
		},
		{
			MethodName: "ReadOneWithBinary",
			Handler:    _Interface_ReadOneWithBinary_Handler,
		},
		{
			MethodName: "ReadAllWithBinary",
			Handler:    _Interface_ReadAllWithBinary_Handler,
		},
		{
			MethodName: "ReadOneWithBinaryAndCalArea",
			Handler:    _Interface_ReadOneWithBinaryAndCalArea_Handler,
		},
		{
			MethodName: "ReadAllWithBinaryAndCalArea",
			Handler:    _Interface_ReadAllWithBinaryAndCalArea_Handler,
		},
		{
			MethodName: "RegisterMachine",
			Handler:    _Interface_RegisterMachine_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _Interface_UpdateMachine_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _Interface_GetMachine_Handler,
		},
		{
			MethodName: "GetCurrentUserMachines",
			Handler:    _Interface_GetCurrentUserMachines_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Interface_Move_Handler,
		},
		{
			MethodName: "Zero",
			Handler:    _Interface_Zero_Handler,
		},
		{
			MethodName: "GetMotorStatus",
			Handler:    _Interface_GetMotorStatus_Handler,
		},
		{
			MethodName: "CreateCronJob",
			Handler:    _Interface_CreateCronJob_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _Interface_DeleteCronJob_Handler,
		},
		{
			MethodName: "ListCronJob",
			Handler:    _Interface_ListCronJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/htpp/htpp/interface/v1/interface.proto",
}
