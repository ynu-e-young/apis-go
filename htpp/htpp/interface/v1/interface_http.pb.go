// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             (unknown)
// source: apis/htpp/htpp/interface/v1/interface.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInterfaceCreateCronJob = "/htpp.htpp.interface.v1.Interface/CreateCronJob"
const OperationInterfaceDeleteCronJob = "/htpp.htpp.interface.v1.Interface/DeleteCronJob"
const OperationInterfaceGetCurrentUser = "/htpp.htpp.interface.v1.Interface/GetCurrentUser"
const OperationInterfaceGetCurrentUserMachines = "/htpp.htpp.interface.v1.Interface/GetCurrentUserMachines"
const OperationInterfaceGetMachine = "/htpp.htpp.interface.v1.Interface/GetMachine"
const OperationInterfaceGetMotorStatus = "/htpp.htpp.interface.v1.Interface/GetMotorStatus"
const OperationInterfaceListCronJob = "/htpp.htpp.interface.v1.Interface/ListCronJob"
const OperationInterfaceLogin = "/htpp.htpp.interface.v1.Interface/Login"
const OperationInterfaceMove = "/htpp.htpp.interface.v1.Interface/Move"
const OperationInterfaceReadAll = "/htpp.htpp.interface.v1.Interface/ReadAll"
const OperationInterfaceReadAllWithBinary = "/htpp.htpp.interface.v1.Interface/ReadAllWithBinary"
const OperationInterfaceReadAllWithBinaryAndCalArea = "/htpp.htpp.interface.v1.Interface/ReadAllWithBinaryAndCalArea"
const OperationInterfaceReadOne = "/htpp.htpp.interface.v1.Interface/ReadOne"
const OperationInterfaceReadOneWithBinary = "/htpp.htpp.interface.v1.Interface/ReadOneWithBinary"
const OperationInterfaceReadOneWithBinaryAndCalArea = "/htpp.htpp.interface.v1.Interface/ReadOneWithBinaryAndCalArea"
const OperationInterfaceRegister = "/htpp.htpp.interface.v1.Interface/Register"
const OperationInterfaceRegisterMachine = "/htpp.htpp.interface.v1.Interface/RegisterMachine"
const OperationInterfaceUpdateMachine = "/htpp.htpp.interface.v1.Interface/UpdateMachine"
const OperationInterfaceUpdateUser = "/htpp.htpp.interface.v1.Interface/UpdateUser"
const OperationInterfaceZero = "/htpp.htpp.interface.v1.Interface/Zero"

type InterfaceHTTPServer interface {
	CreateCronJob(context.Context, *CreateCronJobRequest) (*CronJobReply, error)
	DeleteCronJob(context.Context, *DeleteCronJobRequest) (*DeleteCronJobReply, error)
	GetCurrentUser(context.Context, *GetCurrentUserRequest) (*UserReply, error)
	GetCurrentUserMachines(context.Context, *GetCurrentUserMachinesRequest) (*MachinesReply, error)
	GetMachine(context.Context, *GetMachineRequest) (*MachineReply, error)
	GetMotorStatus(context.Context, *GetMotorStatusRequest) (*GetMotorStatusReply, error)
	ListCronJob(context.Context, *ListCronJobRequest) (*CronJobsReply, error)
	Login(context.Context, *LoginRequest) (*UserReply, error)
	Move(context.Context, *MoveRequest) (*MoveReply, error)
	ReadAll(context.Context, *ReadAllRequest) (*ImagesReply, error)
	ReadAllWithBinary(context.Context, *ReadAllWithBinaryRequest) (*ImagesReply, error)
	ReadAllWithBinaryAndCalArea(context.Context, *ReadAllWithBinaryAndCalAreaRequest) (*ImagesWithAreaReply, error)
	ReadOne(context.Context, *ReadOneRequest) (*ImageReply, error)
	ReadOneWithBinary(context.Context, *ReadOneWithBinaryRequest) (*ImageReply, error)
	ReadOneWithBinaryAndCalArea(context.Context, *ReadOneWithBinaryAndCalAreaRequest) (*ImageWithAreaReply, error)
	Register(context.Context, *RegisterRequest) (*UserReply, error)
	RegisterMachine(context.Context, *RegisterMachineRequest) (*MachineReply, error)
	UpdateMachine(context.Context, *UpdateMachineRequest) (*MachineReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserReply, error)
	Zero(context.Context, *ZeroRequest) (*ZeroReply, error)
}

func RegisterInterfaceHTTPServer(s *http.Server, srv InterfaceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/users/login", _Interface_Login0_HTTP_Handler(srv))
	r.POST("/v1/users", _Interface_Register0_HTTP_Handler(srv))
	r.GET("/v1/user/{id}", _Interface_GetCurrentUser0_HTTP_Handler(srv))
	r.PUT("/v1/user", _Interface_UpdateUser0_HTTP_Handler(srv))
	r.GET("/v1/capture/{id}", _Interface_ReadOne0_HTTP_Handler(srv))
	r.GET("/v1/capture", _Interface_ReadAll0_HTTP_Handler(srv))
	r.GET("/v1/capture/{id}/binary", _Interface_ReadOneWithBinary0_HTTP_Handler(srv))
	r.GET("/v1/capture/binary", _Interface_ReadAllWithBinary0_HTTP_Handler(srv))
	r.GET("/v1/capture/{id}/binary/area", _Interface_ReadOneWithBinaryAndCalArea0_HTTP_Handler(srv))
	r.GET("/v1/capture/binary/area", _Interface_ReadAllWithBinaryAndCalArea0_HTTP_Handler(srv))
	r.POST("/v1/machines", _Interface_RegisterMachine0_HTTP_Handler(srv))
	r.PUT("/v1/machine", _Interface_UpdateMachine0_HTTP_Handler(srv))
	r.GET("/v1/machines/{machine_id}", _Interface_GetMachine0_HTTP_Handler(srv))
	r.GET("/v1/machine/{user_id}", _Interface_GetCurrentUserMachines0_HTTP_Handler(srv))
	r.POST("/v1/machines/{machine_id}/move", _Interface_Move0_HTTP_Handler(srv))
	r.POST("/v1/machines/{machine_id}/zero", _Interface_Zero0_HTTP_Handler(srv))
	r.GET("/v1/machines/{machine_id}/status", _Interface_GetMotorStatus0_HTTP_Handler(srv))
	r.POST("/v1/cronJobs", _Interface_CreateCronJob0_HTTP_Handler(srv))
	r.DELETE("/v1/cronJobs/{id}", _Interface_DeleteCronJob0_HTTP_Handler(srv))
	r.GET("/v1/cronJobs/{machine_id}", _Interface_ListCronJob0_HTTP_Handler(srv))
}

func _Interface_Login0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_Register0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_GetCurrentUser0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCurrentUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceGetCurrentUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentUser(ctx, req.(*GetCurrentUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_UpdateUser0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_ReadOne0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadOneRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceReadOne)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadOne(ctx, req.(*ReadOneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_ReadAll0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadAllRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceReadAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadAll(ctx, req.(*ReadAllRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImagesReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_ReadOneWithBinary0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadOneWithBinaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceReadOneWithBinary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadOneWithBinary(ctx, req.(*ReadOneWithBinaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_ReadAllWithBinary0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadAllWithBinaryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceReadAllWithBinary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadAllWithBinary(ctx, req.(*ReadAllWithBinaryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImagesReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_ReadOneWithBinaryAndCalArea0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadOneWithBinaryAndCalAreaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceReadOneWithBinaryAndCalArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadOneWithBinaryAndCalArea(ctx, req.(*ReadOneWithBinaryAndCalAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImageWithAreaReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_ReadAllWithBinaryAndCalArea0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadAllWithBinaryAndCalAreaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceReadAllWithBinaryAndCalArea)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadAllWithBinaryAndCalArea(ctx, req.(*ReadAllWithBinaryAndCalAreaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ImagesWithAreaReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_RegisterMachine0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterMachineRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceRegisterMachine)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterMachine(ctx, req.(*RegisterMachineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MachineReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_UpdateMachine0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMachineRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceUpdateMachine)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMachine(ctx, req.(*UpdateMachineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MachineReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_GetMachine0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMachineRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceGetMachine)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMachine(ctx, req.(*GetMachineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MachineReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_GetCurrentUserMachines0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCurrentUserMachinesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceGetCurrentUserMachines)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentUserMachines(ctx, req.(*GetCurrentUserMachinesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MachinesReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_Move0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MoveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceMove)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Move(ctx, req.(*MoveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MoveReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_Zero0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ZeroRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceZero)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Zero(ctx, req.(*ZeroRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ZeroReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_GetMotorStatus0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMotorStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceGetMotorStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMotorStatus(ctx, req.(*GetMotorStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMotorStatusReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_CreateCronJob0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCronJobRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceCreateCronJob)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCronJob(ctx, req.(*CreateCronJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CronJobReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_DeleteCronJob0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCronJobRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceDeleteCronJob)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCronJob(ctx, req.(*DeleteCronJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCronJobReply)
		return ctx.Result(200, reply)
	}
}

func _Interface_ListCronJob0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCronJobRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceListCronJob)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCronJob(ctx, req.(*ListCronJobRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CronJobsReply)
		return ctx.Result(200, reply)
	}
}

type InterfaceHTTPClient interface {
	CreateCronJob(ctx context.Context, req *CreateCronJobRequest, opts ...http.CallOption) (rsp *CronJobReply, err error)
	DeleteCronJob(ctx context.Context, req *DeleteCronJobRequest, opts ...http.CallOption) (rsp *DeleteCronJobReply, err error)
	GetCurrentUser(ctx context.Context, req *GetCurrentUserRequest, opts ...http.CallOption) (rsp *UserReply, err error)
	GetCurrentUserMachines(ctx context.Context, req *GetCurrentUserMachinesRequest, opts ...http.CallOption) (rsp *MachinesReply, err error)
	GetMachine(ctx context.Context, req *GetMachineRequest, opts ...http.CallOption) (rsp *MachineReply, err error)
	GetMotorStatus(ctx context.Context, req *GetMotorStatusRequest, opts ...http.CallOption) (rsp *GetMotorStatusReply, err error)
	ListCronJob(ctx context.Context, req *ListCronJobRequest, opts ...http.CallOption) (rsp *CronJobsReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *UserReply, err error)
	Move(ctx context.Context, req *MoveRequest, opts ...http.CallOption) (rsp *MoveReply, err error)
	ReadAll(ctx context.Context, req *ReadAllRequest, opts ...http.CallOption) (rsp *ImagesReply, err error)
	ReadAllWithBinary(ctx context.Context, req *ReadAllWithBinaryRequest, opts ...http.CallOption) (rsp *ImagesReply, err error)
	ReadAllWithBinaryAndCalArea(ctx context.Context, req *ReadAllWithBinaryAndCalAreaRequest, opts ...http.CallOption) (rsp *ImagesWithAreaReply, err error)
	ReadOne(ctx context.Context, req *ReadOneRequest, opts ...http.CallOption) (rsp *ImageReply, err error)
	ReadOneWithBinary(ctx context.Context, req *ReadOneWithBinaryRequest, opts ...http.CallOption) (rsp *ImageReply, err error)
	ReadOneWithBinaryAndCalArea(ctx context.Context, req *ReadOneWithBinaryAndCalAreaRequest, opts ...http.CallOption) (rsp *ImageWithAreaReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *UserReply, err error)
	RegisterMachine(ctx context.Context, req *RegisterMachineRequest, opts ...http.CallOption) (rsp *MachineReply, err error)
	UpdateMachine(ctx context.Context, req *UpdateMachineRequest, opts ...http.CallOption) (rsp *MachineReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *UserReply, err error)
	Zero(ctx context.Context, req *ZeroRequest, opts ...http.CallOption) (rsp *ZeroReply, err error)
}

type InterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewInterfaceHTTPClient(client *http.Client) InterfaceHTTPClient {
	return &InterfaceHTTPClientImpl{client}
}

func (c *InterfaceHTTPClientImpl) CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...http.CallOption) (*CronJobReply, error) {
	var out CronJobReply
	pattern := "/v1/cronJobs"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInterfaceCreateCronJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...http.CallOption) (*DeleteCronJobReply, error) {
	var out DeleteCronJobReply
	pattern := "/v1/cronJobs/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceDeleteCronJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) GetCurrentUser(ctx context.Context, in *GetCurrentUserRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/v1/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceGetCurrentUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) GetCurrentUserMachines(ctx context.Context, in *GetCurrentUserMachinesRequest, opts ...http.CallOption) (*MachinesReply, error) {
	var out MachinesReply
	pattern := "/v1/machine/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceGetCurrentUserMachines))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...http.CallOption) (*MachineReply, error) {
	var out MachineReply
	pattern := "/v1/machines/{machine_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceGetMachine))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) GetMotorStatus(ctx context.Context, in *GetMotorStatusRequest, opts ...http.CallOption) (*GetMotorStatusReply, error) {
	var out GetMotorStatusReply
	pattern := "/v1/machines/{machine_id}/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceGetMotorStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) ListCronJob(ctx context.Context, in *ListCronJobRequest, opts ...http.CallOption) (*CronJobsReply, error) {
	var out CronJobsReply
	pattern := "/v1/cronJobs/{machine_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceListCronJob))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/v1/users/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInterfaceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) Move(ctx context.Context, in *MoveRequest, opts ...http.CallOption) (*MoveReply, error) {
	var out MoveReply
	pattern := "/v1/machines/{machine_id}/move"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInterfaceMove))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...http.CallOption) (*ImagesReply, error) {
	var out ImagesReply
	pattern := "/v1/capture"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceReadAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) ReadAllWithBinary(ctx context.Context, in *ReadAllWithBinaryRequest, opts ...http.CallOption) (*ImagesReply, error) {
	var out ImagesReply
	pattern := "/v1/capture/binary"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceReadAllWithBinary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) ReadAllWithBinaryAndCalArea(ctx context.Context, in *ReadAllWithBinaryAndCalAreaRequest, opts ...http.CallOption) (*ImagesWithAreaReply, error) {
	var out ImagesWithAreaReply
	pattern := "/v1/capture/binary/area"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceReadAllWithBinaryAndCalArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) ReadOne(ctx context.Context, in *ReadOneRequest, opts ...http.CallOption) (*ImageReply, error) {
	var out ImageReply
	pattern := "/v1/capture/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceReadOne))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) ReadOneWithBinary(ctx context.Context, in *ReadOneWithBinaryRequest, opts ...http.CallOption) (*ImageReply, error) {
	var out ImageReply
	pattern := "/v1/capture/{id}/binary"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceReadOneWithBinary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) ReadOneWithBinaryAndCalArea(ctx context.Context, in *ReadOneWithBinaryAndCalAreaRequest, opts ...http.CallOption) (*ImageWithAreaReply, error) {
	var out ImageWithAreaReply
	pattern := "/v1/capture/{id}/binary/area"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceReadOneWithBinaryAndCalArea))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/v1/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInterfaceRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) RegisterMachine(ctx context.Context, in *RegisterMachineRequest, opts ...http.CallOption) (*MachineReply, error) {
	var out MachineReply
	pattern := "/v1/machines"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInterfaceRegisterMachine))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...http.CallOption) (*MachineReply, error) {
	var out MachineReply
	pattern := "/v1/machine"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInterfaceUpdateMachine))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/v1/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInterfaceUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InterfaceHTTPClientImpl) Zero(ctx context.Context, in *ZeroRequest, opts ...http.CallOption) (*ZeroReply, error) {
	var out ZeroReply
	pattern := "/v1/machines/{machine_id}/zero"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationInterfaceZero))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
