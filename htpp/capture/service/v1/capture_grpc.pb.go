// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: apis/htpp/capture/service/v1/capture.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Capture_ReadOne_FullMethodName                           = "/htpp.capture.service.v1.Capture/ReadOne"
	Capture_ReadAll_FullMethodName                           = "/htpp.capture.service.v1.Capture/ReadAll"
	Capture_ReadOneWithBinary_FullMethodName                 = "/htpp.capture.service.v1.Capture/ReadOneWithBinary"
	Capture_ReadOneWithBinaryAndSrc_FullMethodName           = "/htpp.capture.service.v1.Capture/ReadOneWithBinaryAndSrc"
	Capture_ReadAllWithBinary_FullMethodName                 = "/htpp.capture.service.v1.Capture/ReadAllWithBinary"
	Capture_ReadAllWithBinaryAndSrc_FullMethodName           = "/htpp.capture.service.v1.Capture/ReadAllWithBinaryAndSrc"
	Capture_ReadOneWithBinaryAndCalArea_FullMethodName       = "/htpp.capture.service.v1.Capture/ReadOneWithBinaryAndCalArea"
	Capture_ReadOneWithBinaryAndCalAreaAndSrc_FullMethodName = "/htpp.capture.service.v1.Capture/ReadOneWithBinaryAndCalAreaAndSrc"
	Capture_ReadAllWithBinaryAndCalArea_FullMethodName       = "/htpp.capture.service.v1.Capture/ReadAllWithBinaryAndCalArea"
	Capture_ReadAllWithBinaryAndCalAreaAndSrc_FullMethodName = "/htpp.capture.service.v1.Capture/ReadAllWithBinaryAndCalAreaAndSrc"
)

// CaptureClient is the client API for Capture service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaptureClient interface {
	ReadOne(ctx context.Context, in *ReadOneRequest, opts ...grpc.CallOption) (*ImageReply, error)
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ImagesReply, error)
	ReadOneWithBinary(ctx context.Context, in *ReadOneWithBinaryRequest, opts ...grpc.CallOption) (*ImageReply, error)
	ReadOneWithBinaryAndSrc(ctx context.Context, in *ReadOneWithBinaryAndSrcRequest, opts ...grpc.CallOption) (*ImageWithSrcReply, error)
	ReadAllWithBinary(ctx context.Context, in *ReadAllWithBinaryRequest, opts ...grpc.CallOption) (*ImagesReply, error)
	ReadAllWithBinaryAndSrc(ctx context.Context, in *ReadAllWithBinaryAndSrcRequest, opts ...grpc.CallOption) (*ImagesWithSrcReply, error)
	ReadOneWithBinaryAndCalArea(ctx context.Context, in *ReadOneWithBinaryAndCalAreaRequest, opts ...grpc.CallOption) (*ImageWithAreaReply, error)
	ReadOneWithBinaryAndCalAreaAndSrc(ctx context.Context, in *ReadOneWithBinaryAndCalAreaAndSrcRequest, opts ...grpc.CallOption) (*ImageWithAreaAndSrcReply, error)
	ReadAllWithBinaryAndCalArea(ctx context.Context, in *ReadAllWithBinaryAndCalAreaRequest, opts ...grpc.CallOption) (*ImagesWithAreaReply, error)
	ReadAllWithBinaryAndCalAreaAndSrc(ctx context.Context, in *ReadAllWithBinaryAndCalAreaAndSrcRequest, opts ...grpc.CallOption) (*ImagesWithAreaAndSrcReply, error)
}

type captureClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptureClient(cc grpc.ClientConnInterface) CaptureClient {
	return &captureClient{cc}
}

func (c *captureClient) ReadOne(ctx context.Context, in *ReadOneRequest, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, Capture_ReadOne_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ImagesReply, error) {
	out := new(ImagesReply)
	err := c.cc.Invoke(ctx, Capture_ReadAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadOneWithBinary(ctx context.Context, in *ReadOneWithBinaryRequest, opts ...grpc.CallOption) (*ImageReply, error) {
	out := new(ImageReply)
	err := c.cc.Invoke(ctx, Capture_ReadOneWithBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadOneWithBinaryAndSrc(ctx context.Context, in *ReadOneWithBinaryAndSrcRequest, opts ...grpc.CallOption) (*ImageWithSrcReply, error) {
	out := new(ImageWithSrcReply)
	err := c.cc.Invoke(ctx, Capture_ReadOneWithBinaryAndSrc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadAllWithBinary(ctx context.Context, in *ReadAllWithBinaryRequest, opts ...grpc.CallOption) (*ImagesReply, error) {
	out := new(ImagesReply)
	err := c.cc.Invoke(ctx, Capture_ReadAllWithBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadAllWithBinaryAndSrc(ctx context.Context, in *ReadAllWithBinaryAndSrcRequest, opts ...grpc.CallOption) (*ImagesWithSrcReply, error) {
	out := new(ImagesWithSrcReply)
	err := c.cc.Invoke(ctx, Capture_ReadAllWithBinaryAndSrc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadOneWithBinaryAndCalArea(ctx context.Context, in *ReadOneWithBinaryAndCalAreaRequest, opts ...grpc.CallOption) (*ImageWithAreaReply, error) {
	out := new(ImageWithAreaReply)
	err := c.cc.Invoke(ctx, Capture_ReadOneWithBinaryAndCalArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadOneWithBinaryAndCalAreaAndSrc(ctx context.Context, in *ReadOneWithBinaryAndCalAreaAndSrcRequest, opts ...grpc.CallOption) (*ImageWithAreaAndSrcReply, error) {
	out := new(ImageWithAreaAndSrcReply)
	err := c.cc.Invoke(ctx, Capture_ReadOneWithBinaryAndCalAreaAndSrc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadAllWithBinaryAndCalArea(ctx context.Context, in *ReadAllWithBinaryAndCalAreaRequest, opts ...grpc.CallOption) (*ImagesWithAreaReply, error) {
	out := new(ImagesWithAreaReply)
	err := c.cc.Invoke(ctx, Capture_ReadAllWithBinaryAndCalArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captureClient) ReadAllWithBinaryAndCalAreaAndSrc(ctx context.Context, in *ReadAllWithBinaryAndCalAreaAndSrcRequest, opts ...grpc.CallOption) (*ImagesWithAreaAndSrcReply, error) {
	out := new(ImagesWithAreaAndSrcReply)
	err := c.cc.Invoke(ctx, Capture_ReadAllWithBinaryAndCalAreaAndSrc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptureServer is the server API for Capture service.
// All implementations must embed UnimplementedCaptureServer
// for forward compatibility
type CaptureServer interface {
	ReadOne(context.Context, *ReadOneRequest) (*ImageReply, error)
	ReadAll(context.Context, *ReadAllRequest) (*ImagesReply, error)
	ReadOneWithBinary(context.Context, *ReadOneWithBinaryRequest) (*ImageReply, error)
	ReadOneWithBinaryAndSrc(context.Context, *ReadOneWithBinaryAndSrcRequest) (*ImageWithSrcReply, error)
	ReadAllWithBinary(context.Context, *ReadAllWithBinaryRequest) (*ImagesReply, error)
	ReadAllWithBinaryAndSrc(context.Context, *ReadAllWithBinaryAndSrcRequest) (*ImagesWithSrcReply, error)
	ReadOneWithBinaryAndCalArea(context.Context, *ReadOneWithBinaryAndCalAreaRequest) (*ImageWithAreaReply, error)
	ReadOneWithBinaryAndCalAreaAndSrc(context.Context, *ReadOneWithBinaryAndCalAreaAndSrcRequest) (*ImageWithAreaAndSrcReply, error)
	ReadAllWithBinaryAndCalArea(context.Context, *ReadAllWithBinaryAndCalAreaRequest) (*ImagesWithAreaReply, error)
	ReadAllWithBinaryAndCalAreaAndSrc(context.Context, *ReadAllWithBinaryAndCalAreaAndSrcRequest) (*ImagesWithAreaAndSrcReply, error)
	mustEmbedUnimplementedCaptureServer()
}

// UnimplementedCaptureServer must be embedded to have forward compatible implementations.
type UnimplementedCaptureServer struct {
}

func (UnimplementedCaptureServer) ReadOne(context.Context, *ReadOneRequest) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOne not implemented")
}
func (UnimplementedCaptureServer) ReadAll(context.Context, *ReadAllRequest) (*ImagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (UnimplementedCaptureServer) ReadOneWithBinary(context.Context, *ReadOneWithBinaryRequest) (*ImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOneWithBinary not implemented")
}
func (UnimplementedCaptureServer) ReadOneWithBinaryAndSrc(context.Context, *ReadOneWithBinaryAndSrcRequest) (*ImageWithSrcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOneWithBinaryAndSrc not implemented")
}
func (UnimplementedCaptureServer) ReadAllWithBinary(context.Context, *ReadAllWithBinaryRequest) (*ImagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllWithBinary not implemented")
}
func (UnimplementedCaptureServer) ReadAllWithBinaryAndSrc(context.Context, *ReadAllWithBinaryAndSrcRequest) (*ImagesWithSrcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllWithBinaryAndSrc not implemented")
}
func (UnimplementedCaptureServer) ReadOneWithBinaryAndCalArea(context.Context, *ReadOneWithBinaryAndCalAreaRequest) (*ImageWithAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOneWithBinaryAndCalArea not implemented")
}
func (UnimplementedCaptureServer) ReadOneWithBinaryAndCalAreaAndSrc(context.Context, *ReadOneWithBinaryAndCalAreaAndSrcRequest) (*ImageWithAreaAndSrcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOneWithBinaryAndCalAreaAndSrc not implemented")
}
func (UnimplementedCaptureServer) ReadAllWithBinaryAndCalArea(context.Context, *ReadAllWithBinaryAndCalAreaRequest) (*ImagesWithAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllWithBinaryAndCalArea not implemented")
}
func (UnimplementedCaptureServer) ReadAllWithBinaryAndCalAreaAndSrc(context.Context, *ReadAllWithBinaryAndCalAreaAndSrcRequest) (*ImagesWithAreaAndSrcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllWithBinaryAndCalAreaAndSrc not implemented")
}
func (UnimplementedCaptureServer) mustEmbedUnimplementedCaptureServer() {}

// UnsafeCaptureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptureServer will
// result in compilation errors.
type UnsafeCaptureServer interface {
	mustEmbedUnimplementedCaptureServer()
}

func RegisterCaptureServer(s grpc.ServiceRegistrar, srv CaptureServer) {
	s.RegisterService(&Capture_ServiceDesc, srv)
}

func _Capture_ReadOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadOne(ctx, req.(*ReadOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadAll(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadOneWithBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOneWithBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadOneWithBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadOneWithBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadOneWithBinary(ctx, req.(*ReadOneWithBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadOneWithBinaryAndSrc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOneWithBinaryAndSrcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadOneWithBinaryAndSrc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadOneWithBinaryAndSrc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadOneWithBinaryAndSrc(ctx, req.(*ReadOneWithBinaryAndSrcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadAllWithBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllWithBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadAllWithBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadAllWithBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadAllWithBinary(ctx, req.(*ReadAllWithBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadAllWithBinaryAndSrc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllWithBinaryAndSrcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadAllWithBinaryAndSrc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadAllWithBinaryAndSrc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadAllWithBinaryAndSrc(ctx, req.(*ReadAllWithBinaryAndSrcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadOneWithBinaryAndCalArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOneWithBinaryAndCalAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadOneWithBinaryAndCalArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadOneWithBinaryAndCalArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadOneWithBinaryAndCalArea(ctx, req.(*ReadOneWithBinaryAndCalAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadOneWithBinaryAndCalAreaAndSrc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOneWithBinaryAndCalAreaAndSrcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadOneWithBinaryAndCalAreaAndSrc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadOneWithBinaryAndCalAreaAndSrc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadOneWithBinaryAndCalAreaAndSrc(ctx, req.(*ReadOneWithBinaryAndCalAreaAndSrcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadAllWithBinaryAndCalArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllWithBinaryAndCalAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadAllWithBinaryAndCalArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadAllWithBinaryAndCalArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadAllWithBinaryAndCalArea(ctx, req.(*ReadAllWithBinaryAndCalAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capture_ReadAllWithBinaryAndCalAreaAndSrc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllWithBinaryAndCalAreaAndSrcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptureServer).ReadAllWithBinaryAndCalAreaAndSrc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capture_ReadAllWithBinaryAndCalAreaAndSrc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptureServer).ReadAllWithBinaryAndCalAreaAndSrc(ctx, req.(*ReadAllWithBinaryAndCalAreaAndSrcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Capture_ServiceDesc is the grpc.ServiceDesc for Capture service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Capture_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "htpp.capture.service.v1.Capture",
	HandlerType: (*CaptureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadOne",
			Handler:    _Capture_ReadOne_Handler,
		},
		{
			MethodName: "ReadAll",
			Handler:    _Capture_ReadAll_Handler,
		},
		{
			MethodName: "ReadOneWithBinary",
			Handler:    _Capture_ReadOneWithBinary_Handler,
		},
		{
			MethodName: "ReadOneWithBinaryAndSrc",
			Handler:    _Capture_ReadOneWithBinaryAndSrc_Handler,
		},
		{
			MethodName: "ReadAllWithBinary",
			Handler:    _Capture_ReadAllWithBinary_Handler,
		},
		{
			MethodName: "ReadAllWithBinaryAndSrc",
			Handler:    _Capture_ReadAllWithBinaryAndSrc_Handler,
		},
		{
			MethodName: "ReadOneWithBinaryAndCalArea",
			Handler:    _Capture_ReadOneWithBinaryAndCalArea_Handler,
		},
		{
			MethodName: "ReadOneWithBinaryAndCalAreaAndSrc",
			Handler:    _Capture_ReadOneWithBinaryAndCalAreaAndSrc_Handler,
		},
		{
			MethodName: "ReadAllWithBinaryAndCalArea",
			Handler:    _Capture_ReadAllWithBinaryAndCalArea_Handler,
		},
		{
			MethodName: "ReadAllWithBinaryAndCalAreaAndSrc",
			Handler:    _Capture_ReadAllWithBinaryAndCalAreaAndSrc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/htpp/capture/service/v1/capture.proto",
}
